[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.cardComponent.ValueSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.FieldSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mValueSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mValue[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method getValue to return the value[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method toString to return the string representation of a value[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a factory method returning a value from a string[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mFieldSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mField[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a scalable bar[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to print a single Card[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a printable Board[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.stateComponent.stateBaseImpl.StartStateSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.gameComponent.pveGameImpl.PvEGameSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.cardComponent.SymbolSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.util.CaretakerSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.fileIOComponent.fileIOXml.FileIOXSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mSymbolSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mSymbols[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Have a function to return the String Reparsentation of a Symbol[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a factory method returning a value from a string[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mCaretakerSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA caretaker[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to add a memento to its stack[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to pop and return a memento from its stack[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mStartStateSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA startstate[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return a playerturnstate with the first player set to have his turn when called to handle a start event[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return itself when called to handle any other event[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.stateComponent.stateBaseImpl.PlayerTurnStateSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.gameComponent.pvpGameImpl.PvPGameSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.fileIOComponent.fileIOJson.FileIOJSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mFileIOXSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA FileIO[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  when new[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  - should do something[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPlayerTurnStateSpec:[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.util.CommandSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA playerturnstate[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a variable to track whos turn it is[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a variable to track how many players are playing[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return a playerturnstate with the next player set to have his turn when handleing a skip event[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return a playerturnstate with the first player to have his turn when handleing a start event[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return a finishedstate with the currentplayer declared as winner and the other as loser[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.util.OriginatorSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mFileIOJSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mOriginatorSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAn originator[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to save a game and a state in an memento[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to restore a state from a memento and return a saved game[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.stateComponent.GameStateContextSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mCommandSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA command[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to do a step[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to undo a step and save that step for redo[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to redo the last step that was undone and save that undostep for next redo[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.cardComponent.cardBaseImpl.deckSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mdeckSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mDeck[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Have a method for drawing seven cards from a deck[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be subset[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.cardComponent.cardBaseImpl.cardSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mGameStateContextSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA GameStateContext[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a variable state in which the current state of the game is tracked[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a variable maxplayers which tracks how many players are set to play[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function handle, which passes an event to the current state to handle, returning a new or changed state to keep track of[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to return the current state[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to set a state[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.util.MementoSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.GameStateEventsSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPvPGameSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA PvPGame[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a factory method that creates a random new PvPGame with 2 players[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to play cards, returning the changed game or itself, should the cards not be playable or should the state not be a playerturnstate[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to skip a turn should a player not want to play something. It returns itself with a new message. If it is indeed a players turn, it changes the state to signal the next players turn[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method nextround, returning a new game starting with the loser, if in a finishedstate. The loser exchanges his best card for the winners worst card automatically[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to return a vector of cards representing the players hands[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to return cards, representing the board[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to return a message to display the games state and errors[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method save to make a single savegame by returning a memento of itself[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to restore a state from a saved memento and returning the saved game[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.util.ObserverSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.util.UndoManagerSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPvEGameSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA PvEGame[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a factory method that creates a random new PvEGame with 2 players[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to play cards, returning the changed game or itself, should the cards not be playable or should the state not be a playerturnstate[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to skip a turn should a player not want to play something. It returns itself with a new message. If it is indeed a players turn, it changes the state to signal the next players turn[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method nextround, returning a new game starting with the loser, if in a finishedstate. The loser exchanges his best card for the winners worst card automatically[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to return a vector of cards representing the players hands[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to return cards, representing the board[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to return a message to display the games state and errors[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method save to make a single savegame by returning a memento of itself[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to restore a state from a saved memento and returning the saved game[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMementoSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA GameMemento[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should create a new GameMemento with a saved state and game which can be returned[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.cardComponent.cardBaseImpl.cardsSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mGameStateEventsSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mEnum GameStateEvents[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a subclass start to signal that a game is about to start[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a subclass skip to signal that a player wants to skip his turn[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a subclass finished to signal that a game has finished[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.gameComponent.gameSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(de.htwg.se.bettler.model.stateComponent.stateBaseImpl.FinishedStateSpec, org.scalatest.tools.Framework$$anon$1@65ff70ac, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mcardsSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mcardSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mCard[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should create a card from a string, failing if the string does not represent a card[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method for finding out if a card is higher in value than another card[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method for finding out if the value of two cards is the same[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a string representation of a card[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method for returning the value of a card[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method for getting the symbol of a card[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to return the corresponding number for ordering of a card's value[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to return itself as cards holding a set containing only itself[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to return a file containing a picture to represent the card[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mCards[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to return the Set of Cards (Set[Card])[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to check if a Card is contained in the Set of Cards[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to check if the Set of Cards is worse than another Set of Cards[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to check if all the Cards in the Set have the same value[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to group the cards by value in a vector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a method to find a playable card[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Have a Method for adding  Cards to Cards[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Have a Method for adding a Card to Cards[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Have a Method for removing Cards from Cards [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Have a Method for removing a Card from Cards [0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Have a Method for finding the best Card[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Have a Method for finding the worst Card[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Have Method to convert Cards to Srting[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mUndoManagerSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mgameSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA Game[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a factory method to create a pve or pvp game, or a pvp game if not specified[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mFinishedStateSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mA startstate[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return a playerturnstate with the loser set to have his turn when called to handle a start event[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return itself when called to handle any other event[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mObserverSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAn observable[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to add an observer[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to remove an observer[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function to notify each observer[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAn Observer[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should have a function update to change accordingly[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 1 second, 55 milliseconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 81[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 22, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 81, failed 0, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAll tests passed.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mPassed tests:[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.stateComponent.stateBaseImpl.StartStateSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.util.UndoManagerSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.GameStateEventsSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.cardComponent.SymbolSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.util.MementoSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.cardComponent.cardBaseImpl.deckSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.util.CaretakerSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.fileIOComponent.fileIOJson.FileIOJSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.util.CommandSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.util.ObserverSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.fileIOComponent.fileIOXml.FileIOXSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.cardComponent.cardBaseImpl.cardsSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.gameComponent.gameSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.FieldSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.gameComponent.pveGameImpl.PvEGameSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.util.OriginatorSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.stateComponent.stateBaseImpl.FinishedStateSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.stateComponent.GameStateContextSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.cardComponent.ValueSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.gameComponent.pvpGameImpl.PvPGameSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.stateComponent.stateBaseImpl.PlayerTurnStateSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	de.htwg.se.bettler.model.cardComponent.cardBaseImpl.cardSpec[0m
